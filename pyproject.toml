[build-system]
requires = ["uv_build"]
build-backend = "uv_build"

[tool.uv.build-backend]
module-name = "mcnnm"
module-root = "src"


[project]
name = "lightweight-mcnnm"
version = "1.1.1"
description = "Leightweight Implementation of Athey et al. (2021)'s MC-NNM estimator"
authors = [{ name = "Tobias Schnabel", email = "ctobiasschnabel@gmail.com" }]
requires-python = ">=3.12"
readme = "README.md"
license = { text = "GPL-3.0" }
keywords = [
    "causal",
    "inference",
    "panel",
    "matrix",
    "completion",
]
classifiers = [
    "Development Status :: 3 - Alpha",
    "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.12",
    "Programming Language :: Python :: 3.13",
]
dependencies = [
    "pandas>=2.0.3,<3",
    "numpy>=2.0.1,<3",
    "jax>=0.4.25,<0.7.0",
]

[project.urls]
Repository = "https://github.com/tobias-schnabel/lightweight-mcnnm"
Documentation = "https://mcnnm.readthedocs.io/en/latest/"

[dependency-groups]
dev = [
    "pytest>=8.2.2,<9",
    "pytest-cov>=5,<7",
    "pytest-xdist>=3.6,<4",
    "click>=8.1.7,<9",
    "importlib-metadata>=8.2.0,<9",
    "pre-commit>=3.8,<5.0",
    "typed-ast>=1.5.5,<2",
    "jupyter",
    "sphinx",
    "sphinx-book-theme>=1.1.3,<2",
    "sphinx_gallery",
    "sphinx-autodoc-typehints",
    "sphinx_tabs",
    "ty>=0.0.1a13",
]
comparison = [
    "causaltensor>=0.1.8,<0.2",
    "cvxpy",
]

[tool.uv]
default-groups = [
    "dev",
    "comparison",
]
package = true

[[tool.uv.index]]
name = "testpypi"
url = "https://test.pypi.org/legacy/"

[tool.uv.workspace]
members = ["."]

[tool.pytest.ini_options]
testpaths = ["tests"]
pythonpath = [
  "src"
]
addopts = "--doctest-modules --cov=src --cov-report=xml --cov-report=term -n auto"

[tool.coverage.run]
source = ["src/mcnnm"]
omit = ["tests/*"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if __name__ == .__main__.:",
    "raise NotImplementedError",
    "pass",
    "except ImportError:",
]
fail_under = 0
show_missing = true
skip_covered = true

[tool.coverage.warnings]
ignore_module_not_imported = true
ignore_no_data_collected = true

[tool.ruff]
lint.select = ["E4", "E7", "E9", "F", "B", "I", "N", "UP", "W", "C90", "SIM", "ARG", "TCH", "Q"]
lint.ignore = [
    "B007", "D203", "D212", "E741", "PLR0913", "Q000", "N802", "N803", "N806",
    "ANN001", "ANN202", "ARG001", "T201", "SIM108", "PLR0915", "B904", "N815", "N816", "UP040",
    # Exception message rules
    "EM101", "EM102", "TRY003",
    # Complexity rules
    "C901", "PLR0912",
    # Docstring rules
    "D103", "D205", "D401",
    # NumPy legacy rules
    "NPY002",
    # Performance rules
    "PERF401", "RET504",
    # Type annotation rules
    "ANN201", "PGH003",
    # Magic number rules
    "PLR2004",
]
line-length = 120
src = ["src"]
target-version = "py312"
