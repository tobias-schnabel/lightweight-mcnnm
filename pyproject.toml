[build-system]
requires = ["poetry-core>=1.2.0"]
build-backend = "poetry.core.masonry.api"
include = [
    { path = "tests", format = "dir" }
]

[tool.poetry]
name = "lightweight-mcnnm"
version = "1.0.1"
description = "Leightweight Implementation of Athey et al. (2021)'s MC-NNM estimator"
packages = [{include = "mcnnm", from = "src"}]
include = [
    { path = "README.md" },
    { path = "LICENSE" },
    { path = "py.typed" },
]
authors = ["Tobias Schnabel <ctobiasschnabel@gmail.com>"]
license = "GNU3.0"
readme = "README.md"
repository = "https://github.com/tobias-schnabel/mcnnm"
urls = { "Documentation" = "https://mcnnm.readthedocs.io/en/latest/" }
keywords = ["causal", "inference", "panel", "matrix"]
classifiers = [
    "Development Status :: 3 - Alpha",
    "License :: OSI Approved :: GNU General Public License v3 (GPLv3)",
    "Programming Language :: Python :: 3",
    "Programming Language :: Python :: 3.10",
    "Programming Language :: Python :: 3.11",
    "Programming Language :: Python :: 3.12"
]

[tool.poetry.dependencies]
python = "^3.10"
pandas = "^2.0.3"
numpy = "^2.0.1"
jax = "^0.4.25"

[[tool.poetry.source]]
name = "testpypi"
url = "https://test.pypi.org/legacy/"
priority = "supplemental"

[tool.poetry.group.dev.dependencies]
pytest = "^8.2.2"
pytest-cov = "^5.0.0"
mypy = "^1.10.1"
flake8 = "^7.1.1"
bandit = "^1.7.0"
black = "^24.4.2"
click = "^8.1.7"
importlib-metadata = "^8.2.0"
pre-commit = "^3.8.0"
typed-ast = "^1.5.5"
jupyter = "*"
sphinx = "*"
sphinx-book-theme = "^1.1.3"

[tool.poetry.group.comparison]
optional = true

[tool.poetry.group.comparison.dependencies]
causaltensor = "^0.1.8"

[tool.pytest.ini_options]
testpaths = ["tests"]
pythonpath = [
  "src"
]
addopts = "--doctest-modules --cov=src --cov-report=xml --cov-report=term -m 'not comprehensive'"
markers = [
    "timeout: specify timeout for tests",
    "comprehensive: mark tests as part of the comprehensive test suite"
]

[tool.coverage.run]
source = ["src"]
omit = ["tests/*"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "if self.debug:",
    "if __name__ == .__main__.:",
    "raise NotImplementedError",
    "pass",
    "except ImportError:",
]
fail_under = 0
show_missing = true
skip_covered = true

[tool.coverage.warnings]
ignore_module_not_imported = true
ignore_no_data_collected = true


[tool.ruff]
select = ["A", "ANN", "ARG", "B", "BLE", "C4", "C90", "COM", "D1", "D2", "D3", "D4", "DTZ", "EM", "ERA", "EXE", "F", "FA", "FLY", "G", "I", "ICN", "INP", "INT", "ISC", "N", "NPY", "PERF", "PGH", "PIE", "PL", "PT", "PTH", "PYI", "Q", "RET", "RUF", "RSE", "S", "SIM", "SLF", "SLOT", "T10", "T20", "TCH", "TID", "TRY", "UP", "W", "YTT"]
ignore = ["D203", "D212", "PLR0913", "Q000"]
ignore-init-module-imports = true
line-length = 120
src = ["src"]
target-version = "py38"

[tool.tox]
legacy_tox_ini = """
[tox]
envlist = py38, py39, py310, py311, py312, pypy3
skip_missing_interpreters = true

[gh-actions]
python =
    3.10: py310
    3.11: py311
    3.12: py312
    pypy-3.10: pypy3

[testenv]
passenv = GITHUB_*
allowlist_externals = poetry
setenv =
    PYTHONPATH = {toxinidir}/src

commands =
    poetry install -v
    poetry run pytest --cov=src --cov-report=xml --cov-report=term
    poetry run coverage report
"""

[tool.black]
line-length = 100
target-version = ['py38']
include = '\.pyi?$'
extend-exclude = '''
/(
  # directories
  \.eggs
  | \.git
  | \.hg
  | \.mypy_cache
  | \.tox
  | \.venv
  | build
  | build
  | dist
)/
'''
